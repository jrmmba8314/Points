package local.jrmmba.points.models;

import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;

/**
 * The entity allowing interactions with the Transaction table
 */
@Entity
@Table(name = "transactions")
public class Transaction
        extends Auditable
{
    /**
     * The primary key (long) of this transaction
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long transactionId;

    /**
     * The payer (string) for the points being earned
     */
    @NotNull
    private String payer;

    /**
     * The points (int) being earned
     */
    private int points;

    /**
     * The date and time of the transaction
     */
    @NotNull
    @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime timestamp;

    /**
     * Creates a transaction item using the given parameters
     *
     * @param payer     the payer for the points being earned
     * @param points    the points being earned
     * @param timestamp The date and time of the transactions
     */
    public Transaction(String payer, int points, LocalDateTime timestamp)
    {
        this.payer = payer;
        this.points = points;
        this.timestamp = timestamp;
    }

    /**
     * Default constructor as required by the JPA
     */
    public Transaction()
    {
    }

    /**
     * Getter for the primary key of this transaction
     *
     * @return the primary key of this transaction.
     */
    public long getTransactionId()
    {
        return transactionId;
    }

    /**
     * Setter for the primary key of this transaction . Normally the primary key is automatically
     * generated by the application. However, in some testing instances, a primary key must be assigned.
     *
     * @param transactionId the new primary key for this transaction.
     */
    public void setTransactionId(long transactionId)
    {
        this.transactionId = transactionId;
    }

    /**
     * Getter for the payer paying for these points
     *
     * @return the payer of this transaction
     */
    public String getPayer()
    {
        return payer;
    }

    /**
     * Setter for the payer paying for these points
     *
     * @param payer the new payer of this transaction
     */
    public void setPayer(String payer)
    {
        this.payer = payer;
    }

    /**
     * Getter for the points of this transaction
     *
     * @return the points of this transaction
     */
    public int getPoints()
    {
        return points;
    }

    /**
     * Setter for the points of this transaction
     *
     * @param points the new points of this transaction
     */
    public void setPoints(int points)
    {
        this.points = points;
    }

    /**
     * Getter for the date and time of this transaction
     *
     * @return the date and time of this transaction
     */
    public LocalDateTime getTimestamp()
    {
        return timestamp;
    }

    /**
     * Setter for the date and time of this transaction
     *
     * @param timestamp the new date and time of this transaction
     */
    public void setTimestamp(LocalDateTime timestamp)
    {
        this.timestamp = timestamp;
    }
}
